export function cipher(word, code = [420]) {
    if (!word || code.length < 1)
        return null;
    function process(w, c) {
        const encrypted = []; //storage for encryption
        for (let i = 0; i < w.length; i++) { //iterate word letter by letter
            encrypted.push(w.charCodeAt(i) ^ c); //convert letter to char number and xor bit shift by code
        }
        return String.fromCharCode(...encrypted); //return converted char numbers back to string
    }
    let result = word; //result will be modified based on number of codes given in code array
    for (let i = 0; i < code.length; i++) {
        result = process(result, code[i]);
    }
    return result;
}
/** @param {NS} ns */
export async function main(ns) {
    if (ns.args.length != 1 && ns.args.length != 2) { //need to provide script with 1 to 2 args or receive help message
        ns.tprintRaw(React.createElement("span", { style: { color: "red" } }, 'Usage: run cipher.js "word to be ciphered" "[array of codes?]"'));
        ns.exit();
    }
    let code = typeof ns.args[1] === "string" ? JSON.parse(ns.args[1]) :
        ns.args[1] ?? [304, 39, 57, 88, 20, 81, 66, 44, 101, 79]; //needs an array of 1 or more codes
    ns.tprintRaw([React.createElement("span", { style: { color: "white" } }, "Encrypted: "),
        React.createElement("span", { style: { color: "lightblue" } }, cipher(ns.args[0], code))]); //print encrypted code
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lwaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NpcGhlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFVBQVUsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDeEMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7UUFBRSxPQUFPLElBQUksQ0FBQztJQUUxQyxTQUFTLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNwQixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQyx3QkFBd0I7UUFDOUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSwrQkFBK0I7WUFDbkUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMseURBQXlEO1NBQzlGO1FBQ0QsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUEsQ0FBQyw4Q0FBOEM7SUFDeEYsQ0FBQztJQUNELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLHNFQUFzRTtJQUN6RixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNsQztJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQztBQUdELHFCQUFxQjtBQUNyQixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFFO0lBQzVCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRSxFQUFFLGlFQUFpRTtRQUNsSCxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsZ0VBQWdFLENBQUMsQ0FBQyxDQUFDO1FBQ3pJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNWO0lBRUQsSUFBSSxJQUFJLEdBQUcsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxtQ0FBbUM7SUFDOUYsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsYUFBYSxDQUFDO1FBQ3ZGLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0I7QUFDbkgsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBjaXBoZXIod29yZCwgY29kZSA9IFs0MjBdKSB7IC8vd29yZCB0byBiZSBlbmNyeXB0ZWQgYW5kIGFycmF5IG9mIHNlY3JldCBjb2RlcyBmb3IgZW5jcnlwdGlvblxuXHRpZiAoIXdvcmQgfHwgY29kZS5sZW5ndGggPCAxKSByZXR1cm4gbnVsbDtcblxuXHRmdW5jdGlvbiBwcm9jZXNzKHcsIGMpIHtcblx0XHRjb25zdCBlbmNyeXB0ZWQgPSBbXTsgLy9zdG9yYWdlIGZvciBlbmNyeXB0aW9uXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB3Lmxlbmd0aDsgaSsrKSB7IC8vaXRlcmF0ZSB3b3JkIGxldHRlciBieSBsZXR0ZXJcblx0XHRcdGVuY3J5cHRlZC5wdXNoKHcuY2hhckNvZGVBdChpKSBeIGMpOyAvL2NvbnZlcnQgbGV0dGVyIHRvIGNoYXIgbnVtYmVyIGFuZCB4b3IgYml0IHNoaWZ0IGJ5IGNvZGVcblx0XHR9XG5cdFx0cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoLi4uZW5jcnlwdGVkKSAvL3JldHVybiBjb252ZXJ0ZWQgY2hhciBudW1iZXJzIGJhY2sgdG8gc3RyaW5nXG5cdH1cblx0bGV0IHJlc3VsdCA9IHdvcmQ7IC8vcmVzdWx0IHdpbGwgYmUgbW9kaWZpZWQgYmFzZWQgb24gbnVtYmVyIG9mIGNvZGVzIGdpdmVuIGluIGNvZGUgYXJyYXlcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjb2RlLmxlbmd0aDsgaSsrKSB7XG5cdFx0cmVzdWx0ID0gcHJvY2VzcyhyZXN1bHQsIGNvZGVbaV0pO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5cblxuLyoqIEBwYXJhbSB7TlN9IG5zICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihucykge1xuXHRpZiAobnMuYXJncy5sZW5ndGggIT0gMSAmJiBucy5hcmdzLmxlbmd0aCAhPSAyKSB7IC8vbmVlZCB0byBwcm92aWRlIHNjcmlwdCB3aXRoIDEgdG8gMiBhcmdzIG9yIHJlY2VpdmUgaGVscCBtZXNzYWdlXG5cdFx0bnMudHByaW50UmF3KFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgc3R5bGU6IHsgY29sb3I6IFwicmVkXCIgfSB9LCAnVXNhZ2U6IHJ1biBjaXBoZXIuanMgXCJ3b3JkIHRvIGJlIGNpcGhlcmVkXCIgXCJbYXJyYXkgb2YgY29kZXM/XVwiJykpO1xuXHRcdG5zLmV4aXQoKTtcblx0fVxuXG5cdGxldCBjb2RlID0gdHlwZW9mIG5zLmFyZ3NbMV0gPT09IFwic3RyaW5nXCIgPyBKU09OLnBhcnNlKG5zLmFyZ3NbMV0pIDpcblx0XHRucy5hcmdzWzFdID8/IFszMDQsIDM5LCA1NywgODgsIDIwLCA4MSwgNjYsIDQ0LCAxMDEsIDc5XTsgLy9uZWVkcyBhbiBhcnJheSBvZiAxIG9yIG1vcmUgY29kZXNcblx0bnMudHByaW50UmF3KFtSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IHN0eWxlOiB7IGNvbG9yOiBcIndoaXRlXCIgfSB9LCBcIkVuY3J5cHRlZDogXCIpLFxuXHRSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IHN0eWxlOiB7IGNvbG9yOiBcImxpZ2h0Ymx1ZVwiIH0gfSwgY2lwaGVyKG5zLmFyZ3NbMF0sIGNvZGUpKV0pOyAvL3ByaW50IGVuY3J5cHRlZCBjb2RlXG59XHQiXX0=