export function decipher(word, code = [420]) {
    if (!word || code.length < 1)
        return null;
    function process(w, c) {
        const decrypted = []; //storage for decryption
        for (let i = 0; i < w.length; i++) { //iterate encryptedWord letter by letter
            decrypted.push(w.charCodeAt(i) ^ c); //convert letter to char number and xor bit shift by code
        }
        return String.fromCharCode(...decrypted); //return converted char numbers back to string
    }
    let result = word; //result will be modified based on number of codes given in code array
    for (let i = 0; i < code.length; i++) {
        result = process(result, code[i]);
    }
    return result;
}
/** @param {NS} ns */
export async function main(ns) {
    if (ns.args.length != 1 && ns.args.length != 2) { //need to provide script with 1 to 2 args or receive help message
        ns.tprintRaw(React.createElement("span", { style: { color: "red" } }, 'Usage: run decipher.js "word to be deciphered" "[array of codes?]"'));
        ns.exit();
    }
    let code = typeof ns.args[1] === "string" ? JSON.parse(ns.args[1]) :
        ns.args[1] ?? [304, 39, 57, 88, 20, 81, 66, 44, 101, 79]; //needs an array of 1 or more codes
    ns.tprintRaw([React.createElement("span", { style: { color: "white" } }, "Decrypted: "),
        React.createElement("span", { style: { color: "yellow" } }, decipher(ns.args[0], code))]); //print decrypted code
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjaXBoZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZGVjaXBoZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQzFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFFMUMsU0FBUyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDcEIsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUMsd0JBQXdCO1FBQzlDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsd0NBQXdDO1lBQzVFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLHlEQUF5RDtTQUM5RjtRQUNELE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsOENBQThDO0lBQ3pGLENBQUM7SUFDRCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxzRUFBc0U7SUFDekYsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDckMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbEM7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUM7QUFHRCxxQkFBcUI7QUFDckIsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBRTtJQUM1QixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUUsRUFBRSxpRUFBaUU7UUFDbEgsRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLG9FQUFvRSxDQUFDLENBQUMsQ0FBQztRQUM3SSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDVjtJQUVELElBQUksSUFBSSxHQUFHLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsbUNBQW1DO0lBQzlGLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLGFBQWEsQ0FBQztRQUN2RixLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCO0FBQ2xILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZGVjaXBoZXIod29yZCwgY29kZSA9IFs0MjBdKSB7IC8vd29yZCB0byBiZSBkZWNyeXB0ZWQgYW5kIGFycmF5IG9mIHNlY3JldCBjb2RlcyBmb3IgZGVjcnlwdGlvblxuXHRpZiAoIXdvcmQgfHwgY29kZS5sZW5ndGggPCAxKSByZXR1cm4gbnVsbDtcblxuXHRmdW5jdGlvbiBwcm9jZXNzKHcsIGMpIHtcblx0XHRjb25zdCBkZWNyeXB0ZWQgPSBbXTsgLy9zdG9yYWdlIGZvciBkZWNyeXB0aW9uXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB3Lmxlbmd0aDsgaSsrKSB7IC8vaXRlcmF0ZSBlbmNyeXB0ZWRXb3JkIGxldHRlciBieSBsZXR0ZXJcblx0XHRcdGRlY3J5cHRlZC5wdXNoKHcuY2hhckNvZGVBdChpKSBeIGMpOyAvL2NvbnZlcnQgbGV0dGVyIHRvIGNoYXIgbnVtYmVyIGFuZCB4b3IgYml0IHNoaWZ0IGJ5IGNvZGVcblx0XHR9XG5cdFx0cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoLi4uZGVjcnlwdGVkKTsgLy9yZXR1cm4gY29udmVydGVkIGNoYXIgbnVtYmVycyBiYWNrIHRvIHN0cmluZ1xuXHR9XG5cdGxldCByZXN1bHQgPSB3b3JkOyAvL3Jlc3VsdCB3aWxsIGJlIG1vZGlmaWVkIGJhc2VkIG9uIG51bWJlciBvZiBjb2RlcyBnaXZlbiBpbiBjb2RlIGFycmF5XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgY29kZS5sZW5ndGg7IGkrKykge1xuXHRcdHJlc3VsdCA9IHByb2Nlc3MocmVzdWx0LCBjb2RlW2ldKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5cbi8qKiBAcGFyYW0ge05TfSBucyAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnMpIHtcblx0aWYgKG5zLmFyZ3MubGVuZ3RoICE9IDEgJiYgbnMuYXJncy5sZW5ndGggIT0gMikgeyAvL25lZWQgdG8gcHJvdmlkZSBzY3JpcHQgd2l0aCAxIHRvIDIgYXJncyBvciByZWNlaXZlIGhlbHAgbWVzc2FnZVxuXHRcdG5zLnRwcmludFJhdyhSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IHN0eWxlOiB7IGNvbG9yOiBcInJlZFwiIH0gfSwgJ1VzYWdlOiBydW4gZGVjaXBoZXIuanMgXCJ3b3JkIHRvIGJlIGRlY2lwaGVyZWRcIiBcIlthcnJheSBvZiBjb2Rlcz9dXCInKSk7XG5cdFx0bnMuZXhpdCgpO1xuXHR9XG5cblx0bGV0IGNvZGUgPSB0eXBlb2YgbnMuYXJnc1sxXSA9PT0gXCJzdHJpbmdcIiA/IEpTT04ucGFyc2UobnMuYXJnc1sxXSkgOlxuXHRcdG5zLmFyZ3NbMV0gPz8gWzMwNCwgMzksIDU3LCA4OCwgMjAsIDgxLCA2NiwgNDQsIDEwMSwgNzldOyAvL25lZWRzIGFuIGFycmF5IG9mIDEgb3IgbW9yZSBjb2Rlc1xuXHRucy50cHJpbnRSYXcoW1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgc3R5bGU6IHsgY29sb3I6IFwid2hpdGVcIiB9IH0sIFwiRGVjcnlwdGVkOiBcIiksXG5cdFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgc3R5bGU6IHsgY29sb3I6IFwieWVsbG93XCIgfSB9LCBkZWNpcGhlcihucy5hcmdzWzBdLCBjb2RlKSldKTsgLy9wcmludCBkZWNyeXB0ZWQgY29kZVxufVx0Il19